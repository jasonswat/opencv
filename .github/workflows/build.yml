# https://github.com/marketplace/actions/run-on-architecture
# https://github.com/openpnp/opencv/pull/56
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
# https://github.com/openpnp/opencv/actions
# https://github.com/openpnp/opencv/pull/59/files
# https://stackoverflow.com/questions/57498605/github-actions-share-workspace-artifacts-between-jobs?rq=1
# https://github.com/actions/upload-artifact
# https://github.com/actions/download-artifact

# TODO
# - maybe consider doing an arm64 test with run on?
# - see if I can remove more hardcoded paths and such using the matrix variables.

name: Build OpenPnP OpenCV Distribution

on:
  push:
  pull_request:

jobs:
  # Build native libraries for Linux and Mac. Uploads the libraries
  # as artifacts which are used in subsequent jobs.
  build_mac_linux_x64:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11]
        java: [8]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Get Version Info
        run: |
          echo "POM_VERSION=$(mvn build-helper:parse-version org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
          echo "OPENCV_VERSION=$(mvn build-helper:parse-version org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=opencv.version.long -q -DforceStdout)" >> $GITHUB_ENV
          echo "OPENCV_VERSION_SHORT=$(mvn build-helper:parse-version org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=opencv.version.short -q -DforceStdout)" >> $GITHUB_ENV

      - name: Install Gstreamer on Ubuntu
        if: runner.os == 'Linux'
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y -q --no-install-recommends libgstreamer1.0-dev libgstreamer1.0-0 libgstreamer-plugins-base1.0-dev libgstreamer-plugins-base1.0-0 libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio

      - name: Install Gstreamer on macOS
        if: runner.os == 'macOS'
        run: |
          brew install gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly

      - name: Build OpenCV
        id: build_opencv
        run: |
          wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip > /dev/null
          unzip ${{ env.OPENCV_VERSION }} > /dev/null
          cd opencv-${{ env.OPENCV_VERSION }}
          mkdir build
          cd build
          cmake \
            -D OPENCV_FORCE_3RDPARTY_BUILD=ON \
            -D WITH_1394=OFF \
            -D BUILD_JAVA=ON \
            -D BUILD_FAT_JAVA_LIB=ON \
            -D OPENCV_ENABLE_NONFREE=ON \
            -D BUILD_SHARED_LIBS=OFF \
            -D BUILD_PERF_TESTS=OFF \
            -D BUILD_TESTS=OFF \
            -D BUILD_EXAMPLES=OFF \
            -D BUILD_DOCS=OFF \
            -D BUILD_PACKAGE=OFF \
            -D BUILD_opencv_python2=OFF \
            -D BUILD_opencv_python3=OFF \
            -D BUILD_opencv_apps=OFF \
            -D BUILD_opencv_gapi=OFF \
            -D CMAKE_BUILD_TYPE=RELEASE \
            ..
          make -j8

      - name: Copy Mac Libraries
        id: copy_mac_libs
        if: (steps.build_opencv.outcome == 'success' && runner.os == 'macOS')
        run: |
          cp opencv-${{ env.OPENCV_VERSION }}/build/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.dylib src/main/resources/nu/pattern/opencv/osx/x86_64 || :
          cp opencv-${{ env.OPENCV_VERSION }}/build/bin/opencv-${{ env.OPENCV_VERSION_SHORT }}.jar upstream || :

      - name: Copy Linux Libraries
        id: copy_linux_libs
        if: (steps.build_opencv.outcome == 'success' && runner.os == 'Linux')
        run: |
          cp opencv-${{ env.OPENCV_VERSION }}/build/bin/opencv-${{ env.OPENCV_VERSION_SHORT }}.jar upstream || :
          cp opencv-${{ env.OPENCV_VERSION }}/build/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.so src/main/resources/nu/pattern/opencv/linux/x86_64 || :

      - name: Build with Maven
        if: (steps.copy_mac_libs.outcome == 'success' && steps.copy_linux_libs.outcome == 'success')
        run: mvn -B build-helper:parse-version test

      - name: Upload Libraries
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}
          path: |
            opencv-${{ env.OPENCV_VERSION }}/build/bin/opencv-${{ env.OPENCV_VERSION_SHORT }}.jar
            opencv-${{ env.OPENCV_VERSION }}/build/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.so
            opencv-${{ env.OPENCV_VERSION }}/build/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.dylib

  # Download and combine the artifacts from the above jobs and build the
  # distribution jar. Uploads it as an artifact for subsequent steps.

      - name: Download Libraries
        uses: actions/download-artifact@v2

      - name: Copy Binaries
        run: |
          cp macos-11/bin/opencv-${{ env.OPENCV_VERSION_SHORT }}.jar upstream
          cp macos-11/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.dylib src/main/resources/nu/pattern/opencv/osx/x86_64
          cp ubuntu-20.04/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.so src/main/resources/nu/pattern/opencv/linux/x86_64

      - name: Build with Maven
        run: |
          export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu"
          mvn -B build-helper:parse-version install

      - name: Upload Distribution
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: target/opencv*

  # Downloads the distribution jar that was built above and runs
  # a short smoke test on it on many platforms and versions of
  # Java. This is intended to ensure that the built jar
  # runs on all of the supported targets.
  test:
    needs: build_mac_linux_x64
    strategy:
      matrix:
        os: [macos-11, ubuntu-20.04, ubuntu-22.04]
        java: [8, 9, 10, 11, 12, 13, 14, 15]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Get Version Info
        shell: bash
        run: |
          echo "POM_VERSION=$(mvn build-helper:parse-version org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
          echo "OPENCV_VERSION=$(mvn build-helper:parse-version org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=opencv.version.long -q -DforceStdout)" >> $GITHUB_ENV
          echo "OPENCV_VERSION_SHORT=$(mvn build-helper:parse-version org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=opencv.version.short -q -DforceStdout)" >> $GITHUB_ENV

      - name: Download Distribution
        uses: actions/download-artifact@v2
        with:
          name: dist

      - name: Run Test
        shell: bash
        run: java -cp opencv-${{ env.POM_VERSION }}.jar nu.pattern.PrintVersion



  publish:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    needs: test

    strategy:
      matrix:
        os: [ubuntu-20.04]
        java: [8]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_PASSWORD
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Get Version Info
        run: |
          echo "POM_VERSION=$(mvn build-helper:parse-version org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
          echo "OPENCV_VERSION=$(mvn build-helper:parse-version org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=opencv.version.long -q -DforceStdout)" >> $GITHUB_ENV
          echo "OPENCV_VERSION_SHORT=$(mvn build-helper:parse-version org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=opencv.version.short -q -DforceStdout)" >> $GITHUB_ENV

      - name: Download Libraries
        uses: actions/download-artifact@v2

      - name: Copy Binaries
        run: |
          cp macos-11/bin/opencv-${{ env.OPENCV_VERSION_SHORT }}.jar upstream
          cp macos-11/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.dylib src/main/resources/nu/pattern/opencv/osx/x86_64
          cp ubuntu-20.04/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.so src/main/resources/nu/pattern/opencv/linux/x86_64

      - name: Publish to Apache Maven Central
        run: mvn -B -e clean deploy -P release-sign-artifacts
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}


